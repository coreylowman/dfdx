[package]
name = "dfdx"
version = "0.10.0"
edition = "2021"
license = "MIT OR Apache-2.0"

description = "Ergonomic auto differentiation in Rust, with pytorch like apis."
homepage = "https://github.com/coreylowman/dfdx"
documentation = "https://docs.rs/dfdx"
repository = "https://github.com/coreylowman/dfdx"
readme = "README.md"

keywords = [
    "deep-learning",
    "neural-network",
    "backprop",
    "tensor",
    "autodiff",
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[package.metadata.docs.rs]
features = ["nightly", "numpy"]

[dependencies]
no-std-compat = { version = "0.4.1", default-features = false, features = [ "alloc", "compat_hash" ] }
rand = { version = "0.8.5", default-features = false, features = ["std_rng"] }
rand_distr = { version = "0.4.3", default-features = false, features = ["std_math"] }
matrixmultiply = { version = "0.3.2", default-features = false }
zip = { version = "0.6.2", default-features = false, optional = true }
cblas-sys = { version = "0.1.4", default-features = false, optional = true }
libc = { version = "0.2", default-features = false, optional = true }
cudarc = { version = "0.6.1", default-features = false, optional = true }

[features]
default = ["std", "numpy"]
std = ["no-std-compat/std", "rand/std", "rand_distr/std", "cudarc?/std", "matrixmultiply/threading"]
nightly = []
numpy = ["dep:zip", "std"]
cblas = ["dep:cblas-sys", "dep:libc"]
intel-mkl = ["cblas"]
cuda = ["dep:cudarc"]
test-cuda = ["cuda"]

[dev-dependencies]
rand = "0.8.5"
tempfile = "3.3.0"
mnist = "0.5.0"
indicatif = "0.16.2"

[build-dependencies]
rustc_version = "0.4.0"
glob = "0.3.0"